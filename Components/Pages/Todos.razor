@page "/todo"
@using Cafe.Data
@using Cafe.Components.Layout

<nav class="navbar navbar-light bg-light justify-content-between">
    <h1 class="navbar-brand mb-0 h1">Add-In</h1>
    <button class="btn btn-primary" type="button" @onclick="OpenAddTodoDialog">
        <span class="oi oi-plus" /> Add
    </button>
</nav>
<div class="d-flex">
    <input type="search" class="form-control search" placeholder="Search" @oninput="SearchTaskName" />
    <a class='btn text-@(_sortBy == "taskName" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
       @onclick='()=>SortByHandler("taskName")'>
        <span class='oi oi-sort-@(_sortBy == "taskName" ? _sortDirection : "ascending")' />
    </a>
    <a class='btn text-@(_sortBy == "price" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
       @onclick='()=>SortByHandler("price")'>
        <span class='oi oi-sort-@(_sortBy == "price" ? _sortDirection : "ascending")' />
    </a>
</div>
<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Price</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @{
            IEnumerable<TodoItem> todoList = _todos;

            foreach (var todoItem in todoList)
            {
                <tr>

                    <td class='@(todoItem.IsDone ? "text-decoration-line-through" : "")'>@todoItem.Name</td>
                    <td class='@(todoItem.IsDone ? "text-decoration-line-through" : "")'>Rs.@todoItem.Price</td>

                <td>
                    <button disabled="@todoItem.IsDone" class="btn btn-outline-secondary" type="button"
                        @onclick="()=>OpenEditTodoDialog(todoItem)">
                        <span class="oi oi-pencil" /> Edit
                    </button>
                    <button class="btn btn-outline-danger" type="button" @onclick="()=>OpenDeleteTodoDialog(todoItem)">
                        <span class="oi oi-delete" /> Delete
                    </button>
                </td>
            </tr>
            }
        }
    </tbody>
</table>

@if (_showEditTodoDialog)
{
    <ModalDialog Title="@_dialogTitle" OnClose="@OnEditTodoDialogClose" OkLabel="@_dialogOkLabel">
    <div class="form-floating">
        <input id="taskName" type="text" class="form-control" @bind="_todoModel.Name" placeholder="Add In" />
        <label for="taskName">Add In</label>
    </div>
        <div class="form-floating">
            <input  type="number" class="form-control" @bind="_todoModel.Price" placeholder="Price" />
            <label for="Price">Price</label>
        </div>

    @if (!string.IsNullOrEmpty(_editTodoErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_editTodoErrorMessage" />
        }
        </ModalDialog>
}

@if (_showDeleteTodoDialog)
{
    <ModalDialog Title="Delete AddIn" OnClose="@OnDeleteTodoDialogClose" OkLabel="Confirm">
    <p>Are you sure you want to delete <strong>@_deleteTodo.Name</strong> task?</p>
    <p>Are you sure you want to delete <strong>@_deleteTodo.Price</strong> task?</p>
    @if (!string.IsNullOrEmpty(_deleteTodoErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_deleteTodoErrorMessage" />
        }
        </ModalDialog>
}

@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private bool _showEditTodoDialog { get; set; }
    private bool _showDeleteTodoDialog { get; set; }
    private List<TodoItem> _todos { get; set; }
    private TodoItem _deleteTodo { get; set; }
    private string _dialogTitle { get; set; }
    private string _dialogOkLabel { get; set; }
    private string _editTodoErrorMessage { get; set; }
    private string _deleteTodoErrorMessage { get; set; }
    private TodoItem _todoModel { get; set; }
    private string _tabFilter = "All";
    private string _sortBy = "dueDate";
    private string _sortDirection = "ascending";

    protected override void OnInitialized()
    {
        _todos = TodosService.GetAll(_globalState.CurrentUser.Id);
    }

    private void SortByHandler(string sortByName)
    {
        if (_sortBy == sortByName)
        {
            _sortDirection = _sortDirection == "ascending" ? "descending" : "ascending";
        }
        else
        {
            _sortBy = sortByName;
            _sortDirection = "ascending";
        }
    }

    private void OpenAddTodoDialog()
    {
        _dialogTitle = "Add Todo";
        _dialogOkLabel = "Add";
        _todoModel = new TodoItem();
        _todoModel.Id = Guid.Empty;
        _showEditTodoDialog = true;
    }

    private void SearchTaskName(ChangeEventArgs e)
    {
        var searchTerm = e.Value.ToString();
        if (!string.IsNullOrEmpty(searchTerm) && searchTerm.Length > 2)
        {
            _todos = TodosService.GetAll(_globalState.CurrentUser.Id).Where(t =>
            t.Name.ToLower().Contains(searchTerm.ToLower())).ToList();
        }
        else
        {
            _todos = TodosService.GetAll(_globalState.CurrentUser.Id);
        }
    }

    private void OpenEditTodoDialog(TodoItem editTodo)
    {
        _dialogTitle = "Edit Todo";
        _dialogOkLabel = "Save";

        _todoModel = editTodo;

        _showEditTodoDialog = true;
    }

    private void OpenDeleteTodoDialog(TodoItem todoItem)
    {
        _deleteTodo = todoItem;
        _showDeleteTodoDialog = true;
    }

    private void updateDate(ChangeEventArgs e)
    {
        _todoModel.DueDate = DateTime.Parse(e.Value.ToString());
    }
    private void OnEditTodoDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            _showEditTodoDialog = false;
        }
        else
        {
            try
            {
                _editTodoErrorMessage = "";
                if (_todoModel.Id == Guid.Empty)
                {
                    _todos = TodosService.Create(_globalState.CurrentUser.Id, _todoModel.Name, _todoModel.Price, _todoModel.DueDate);
                }
                else
                {
                    _todos = TodosService.Update(_globalState.CurrentUser.Id, _todoModel.Id, _todoModel.Name, _todoModel.Price, _todoModel.DueDate,
                    _todoModel.IsDone);
                }
                _showEditTodoDialog = false;
            }
            catch (Exception e)
            {
                _editTodoErrorMessage = e.Message;
            }
        }
    }
    private void OnDeleteTodoDialogClose(bool isCancel)
    {
        if (isCancel)
        {

            _showDeleteTodoDialog = false;
            _deleteTodo = null;
        }
        else
        {
            try
            {
                _deleteTodoErrorMessage = "";
                _todos = TodosService.Delete(_globalState.CurrentUser.Id, _deleteTodo.Id);
                _showDeleteTodoDialog = false;
                _deleteTodo = null;
            }
            catch (Exception e)
            {
                _deleteTodoErrorMessage = e.Message;
            }
        }
    }
    private void TabFilter(string status)
    {
        _tabFilter = status;
    }
    private void ToggleDone(TodoItem todo)
    {
        todo.IsDone = !todo.IsDone;
        _todos = TodosService.Update(_globalState.CurrentUser.Id, todo.Id, todo.Name, todo.Price, todo.DueDate, todo.IsDone);
    }
}